<!-- <!DOCTYPE project SYSTEM "build.dtd"> -->
<project name="interactive-graph-ui" default="compile" basedir="./interactive-graph-ui">

    <!-- Include variables and constants -->
    <property file="../build.properties" />

    <!-- Define the classpath for the project -->
    <path id="project.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!-- Clean the build directory -->
    <target name="clean">
        <delete dir="${build.dir}" />
    </target>
    
    <!-- Create the build directory structure -->
    <target name="init">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${classes.dir}" />
    </target>

    <!-- [default] Compile project -->
    <target name="compile" depends="init">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false" classpath="project.classpath">
            <classpath refid="project.classpath" />
            <compilerarg line="-Xlint:unchecked" />
        </javac>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>

    <!-- Build the project and package it into a WAR file -->
    <target name="build" depends="compile">
        <copy todir="${build.dir}/webapp">
            <fileset dir="${webapp.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/classes">
            <fileset dir="${classes.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/lib">
            <fileset dir="${lib.dir}">
                <include name="*.jar" />
            </fileset>
        </copy>
        <war destfile="${build.dir}/${war.name}" webxml="${webapp.dir}/WEB-INF/web.xml">
            <manifest>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Version" value="1.0-SNAPSHOT"/>
            </manifest>
            <fileset dir="${build.dir}/webapp">
                <include name="**/*" />
                <exclude name="**/WEB-INF/web.xml" />
            </fileset>
        </war>
    </target>

    <!-- Validate XML files -->
    <target name="xml">
        <xmlvalidate lenient="true">
            <fileset dir="${basedir}">
                <include name="**/*.xml" />
            </fileset>
        </xmlvalidate>
    </target>

    <!-- Classpath for JUnit tests -->
    <path id="test.classpath">
        <path refid="project.classpath" />
        <pathelement location="${build.dir}/webapp/WEB-INF/classes" />
        <pathelement location="${build.dir}/test-classes" />
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!-- Test isInArea function using Junit -->
    <target name="test" depends="build">
        <mkdir dir="${build.dir}/test-classes"/>
        <javac srcdir="${test.dir}" destdir="${build.dir}/test-classes" includeantruntime="false" classpathref="test.classpath">
            <compilerarg line="-Xlint:unchecked"/>
        </javac>

        <mkdir dir="${build.dir}/test-results"/>
        <junitlauncher haltonfailure="true" printsummary="true">
            <classpath>
                <path refid="test.classpath"/>
                <pathelement location="${build.dir}/test-classes"/>
            </classpath>
            <testclasses outputdir="${build.dir}/test-results">
                <fileset dir="${build.dir}/test-classes" includes="**/*Test.class"/>
            </testclasses>
        </junitlauncher>
    </target>

    <!-- Convert native2ascii for localization files -->
    <target name="native2ascii">
        <native2ascii encoding="UTF-8" dest="${build.dir}/webapp/WEB-INF/classes" src="${resources.dir}">
            <include name="**/*.properties" />
        </native2ascii>
    </target>

    <!-- Deploy war to helios -->
    <target name="scp" depends="build">
        <scp todir="${scp.host}" port="${scp.port}" password="${scp.password}" trust="true" >
            <fileset dir="${build.dir}">
                <include name="**/*.war" />
            </fileset>
        </scp>
    </target>

    <!-- Alternative version of the project -->
    <target name="alt" depends="build">
        <unwar src="${build.dir}/${war.name}" dest="${build.dir}/alt-webapp">
            <patternset>
                <include name="**/*" />
            </patternset>
        </unwar>

        <replace dir="${build.dir}/alt-webapp">
            <include name="**/*.java" />
            <replacefilter token="variableName" value="alternativeVariableName" />
            <replacefilter token="ClassName" value="AlternativeClassName" />
        </replace>

        <war destfile="${build.dir}/${war.name}-alt.war" webxml="${build.dir}/alt-webapp/WEB-INF/web.xml">
            <manifest>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Version" value="1.0-SNAPSHOT-ALT"/>
            </manifest>
            <fileset dir="${build.dir}/alt-webapp">
                <include name="**/*" />
                <exclude name="**/WEB-INF/web.xml" />
            </fileset>
        </war>
    </target>

    <!-- Alteernative environment -->
    <target name="env">
        <fail unless="java.home" message="java.home is not set in env.properties" />
        <fail unless="javac.args" message="javac.args is not set in env.properties" />
        <fail unless="vm.args" message="vm.args is not set in env.properties" />

        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false" fork="true" executable="${java.home}/bin/javac">
            <classpath refid="project.classpath" />
            <compilerarg line="${javac.args}" />
        </javac>

        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}">
                <include name="**/*" />
            </fileset>
        </copy>

        <java fork="true" classname="com.example.Main">
            <jvmarg line="-Djava.home=${java.home} ${vm.args}" />
            <classpath>
                <path refid="project.classpath" />
                <pathelement location="${classes.dir}" />
            </classpath>
        </java>
    </target>

    <!-- Load prev project versions until compile success -->
    <target name="history" depends="compile">
        <fail message="Project compilation failed. Attempting to find the last working revision...">
            <condition>
                <not>
                    <equals arg1="${compile.result}" arg2="0" />
                </not>
            </condition>
        </fail>

        <svn username="worhant" password="svnIsAPileOfGarbage">
            <log path="${basedir}" limit="1" revision="HEAD">
                <regexp pattern="r(\d+)" />
            </log>
        </svn>

        <property name="last.revision" value="${ant.regexp.regexpmatch(1)}" />

        <svn username="worthant" password="svnIsAPileOfGarbage">
            <info path="${basedir}" revision="${last.revision}">
                <firstmatchmapper from="revision" to="last.working.revision" />
            </info>
        </svn>

        <svn username="worthant" password="svnIsAPileOfGarbage">
            <diff path="${basedir}" revision1="${last.working.revision}" revision2="HEAD" output="diff.txt" />
        </svn>
    </target>
</project>
